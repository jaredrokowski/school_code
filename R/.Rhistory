#write.xlsx(datafile_for_real_final, paste("p_values", x, sep = "_"),
# sheetName = "Sheet2", append = TRUE, row.names = FALSE, showNA = FALSE)
write.table(datafile_for_real_final, "test.xls", col.names = NA, row.names = FALSE, sep="\t")
#write.xlsx(datagroups, paste("p_values", x, sep = "_"), row.names = FALSE, showNA = FALSE)
#write.xlsx(datafile_for_real_final, paste("p_values", x, sep = "_"),
# sheetName = "Sheet2", append = TRUE, row.names = FALSE, showNA = FALSE)
write.table(datafile_for_real_final, "test.xls", col.names = FALSE, row.names = FALSE, sep="\t")
#write.xlsx(datagroups, paste("p_values", x, sep = "_"), row.names = FALSE, showNA = FALSE)
#write.xlsx(datafile_for_real_final, paste("p_values", x, sep = "_"),
# sheetName = "Sheet2", append = TRUE, row.names = FALSE, showNA = FALSE)
write.table(datafile_for_real_final, "test.xls", col.names = FALSE, row.names = FALSE, sep="\t")
#write.xlsx(datagroups, paste("p_values", x, sep = "_"), row.names = FALSE, showNA = FALSE)
#write.xlsx(datafile_for_real_final, paste("p_values", x, sep = "_"),
# sheetName = "Sheet2", append = TRUE, row.names = FALSE, showNA = FALSE)
write.table(datafile_for_real_final, "test.xls", col.names = TRUE, row.names = FALSE, sep="\t")
#write.xlsx(datagroups, paste("p_values", x, sep = "_"), row.names = FALSE, showNA = FALSE)
#write.xlsx(datafile_for_real_final, paste("p_values", x, sep = "_"),
# sheetName = "Sheet2", append = TRUE, row.names = FALSE, showNA = FALSE)
write.table(datafile_for_real_final, "test.xls", col.names = TRUE, row.names = FALSE, sep="\t", na = "")
#write.xlsx(datagroups, paste("p_values", x, sep = "_"), row.names = FALSE, showNA = FALSE)
#write.xlsx(datafile_for_real_final, paste("p_values", x, sep = "_"),
# sheetName = "Sheet2", append = TRUE, row.names = FALSE, showNA = FALSE)
write.table(datafile_for_real_final, "test.xlsx", col.names = TRUE, row.names = FALSE, sep="\t", na = "")
#write.xlsx(datagroups, paste("p_values", x, sep = "_"), row.names = FALSE, showNA = FALSE)
#write.xlsx(datafile_for_real_final, paste("p_values", x, sep = "_"),
# sheetName = "Sheet2", append = TRUE, row.names = FALSE, showNA = FALSE)
write.table(datafile_for_real_final, "test.xls", col.names = TRUE, row.names = FALSE, sep="\t", na = "")
t_test_mine <- function(x){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[-1,2:length(datafile)], 2,
function(x) as.numeric(x)))
datagroups <- datafile[1,]
sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
datafile_with_samples <- cbind(sample_names, datafile_final)
datagroups$p_value <- NA
colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- cbind(datafile_with_samples, as.data.frame(p_value))
datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
write.table(datafile_for_real_final, "test.xls", col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
setwd("..")
setwd(~/)
setwd("~")
setwd("/Users/jaredrokowski/Desktop")
t_test_mine("pseudo_genes2_t1.xlsx")
View(t_test_mine)
t_test_mine <- function(x){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[-1,2:length(datafile)], 2,
function(x) as.numeric(x)))
datagroups <- datafile[1,]
sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
datafile_with_samples <- cbind(sample_names, datafile_final)
datagroups$p_value <- NA
colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- cbind(datafile_with_samples, as.data.frame(p_value))
datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
datafile_for_real_final[1] <- ""
write.table(datafile_for_real_final, "test.xls", col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
t_test_mine("pseudo_genes2_t1.xlsx")
t_test_mine <- function(x){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[-1,2:length(datafile)], 2,
function(x) as.numeric(x)))
datagroups <- datafile[1,]
sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
datafile_with_samples <- cbind(sample_names, datafile_final)
datagroups$p_value <- NA
colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- cbind(datafile_with_samples, as.data.frame(p_value))
datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
datafile_for_real_final[1,] <- ""
write.table(datafile_for_real_final, "test.xls", col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
t_test_mine("pseudo_genes2_t1.xlsx")
t_test_mine <- function(x){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[-1,2:length(datafile)], 2,
function(x) as.numeric(x)))
datagroups <- datafile[1,]
sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
datafile_with_samples <- cbind(sample_names, datafile_final)
datagroups$p_value <- NA
colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- cbind(datafile_with_samples, as.data.frame(p_value))
datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1,] <- ""
write.table(datafile_for_real_final, "test.xls", col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
t_test_mine("pseudo_genes2_t1.xlsx")
t_test_mine <- function(x){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[-1,2:length(datafile)], 2,
function(x) as.numeric(x)))
datagroups <- datafile[1,]
sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
datafile_with_samples <- cbind(sample_names, datafile_final)
datagroups$p_value <- NA
colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- cbind(datafile_with_samples, as.data.frame(p_value))
datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1] <- ""
write.table(datafile_for_real_final, "test.xls", col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
t_test_mine("pseudo_genes2_t1.xlsx")
t_test_mine <- function(x){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[-1,2:length(datafile)], 2,
function(x) as.numeric(x)))
datagroups <- datafile[1,]
sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
datafile_with_samples <- cbind(sample_names, datafile_final)
datagroups$p_value <- NA
colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- cbind(datafile_with_samples, as.data.frame(p_value))
datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1] <- ""
write.table(datafile_for_real_final, paste("p_values", x, sep = "_"), col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
t_test_mine("pseudo_genes2_t1.xlsx")
t_test_mine("pseudo_genes2_t1.xls")
save(t_test_mine, file = "t_test_fun.RData")
View(t_test_mine)
?write.table
t_test_mine <- function(x, y, z){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[y,z:length(datafile)], 2,
function(x) as.numeric(x)))
datagroups <- datafile[1,]
sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
datafile_with_samples <- cbind(sample_names, datafile_final)
datagroups$p_value <- NA
colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- cbind(datafile_with_samples, as.data.frame(p_value))
datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1] <- ""
write.table(datafile_for_real_final, paste("p_values", x, sep = "_"), col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
t_test_mine("pseudo_genes2_t1.xls")
t_test_mine("pseudo_genes2_t1.xls", 3, 2)
datafile_final <- as.data.frame(apply(datafile[3,2:length(datafile)], 2,
function(x) as.numeric(x)))
View(datafile_final)
datafile_final <- as.data.frame(apply(datafile[3:,2:length(datafile)], 2,
function(x) as.numeric(x)))
datafile_final <- as.data.frame(apply(datafile[3:length(datafile),2:length(datafile)], 2,
function(x) as.numeric(x)))
View(datafile)
datafile_final <- as.data.frame(apply(datafile[2:length(datafile),2:length(datafile)], 2,
function(x) as.numeric(x)))
?nrow
datafile_final <- as.data.frame(apply(datafile[2:nrow(datafile),2:length(datafile)], 2,
function(x) as.numeric(x)))
View(datafile_final)
t_test_mine <- function(x, y, z){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[2:nrow(datafile),2:length(datafile)], 2,
function(x) as.numeric(x)))
datagroups <- datafile[1,]
sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
datafile_with_samples <- cbind(sample_names, datafile_final)
datagroups$p_value <- NA
colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- cbind(datafile_with_samples, as.data.frame(p_value))
datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1] <- ""
write.table(datafile_for_real_final, paste("p_values", x, sep = "_"), col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
t_test_mine("pseudo_genes2_t1.xls", 3, 2)
t_test_mine("pseudo_genes2_t1.xls", 4, 3)
t_test_mine("pseudo_genes2_t1.xls", 4, 3)
t_test_mine <- function(x, y, z){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[y:nrow(datafile),z:length(datafile)], 2,
function(x) as.numeric(x)))
datagroups <- datafile[1,]
sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
datafile_with_samples <- cbind(sample_names, datafile_final)
datagroups$p_value <- NA
colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- cbind(datafile_with_samples, as.data.frame(p_value))
datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1] <- ""
write.table(datafile_for_real_final, paste("p_values", x, sep = "_"), col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
t_test_mine("pseudo_genes2_t1.xls", 4, 3)
datafile_final <- as.data.frame(apply(datafile[3:nrow(datafile),3:length(datafile)], 2,
function(x) as.numeric(x)))
View(datafile_final)
t_test_mine("pseudo_genes2_t1.xls", 2, 3)
datafile_with_samples <- cbind.na(sample_names, datafile_final)
?cbind
?merge
datafile_with_samples <- merge(sample_names, datafile_final, all = TRUE)
View(datafile_with_samples)
datafile_with_samples <- merge(sample_names, datafile_final, all = FALSE)
View(datafile_with_samples)
datafile_with_samples <- merge(sample_names, datafile_final)
?cbind
datafile_with_samples <- cbind.na(sample_names, datafile_final)
datafile_with_samples <- cbind(sample_names, datafile_final)
datafile_with_samples <- cbind(sample_names, datafile_final, check.names = TRUE)
datafile_with_samples <- cbind(sample_names, datafile_final)
?rbind2
?rbind.data.frame
?do.call
datafile_with_samples <- merge(data.frame(sample_names, row.names=NULL), data.frame(datafile_final, row.names=NULL), by = 0, all = TRUE)[-1]
View(datafile_with_samples)
sort(datafile_with_samples)
?sort
datagroups <- datafile[1,]
sample_names <- datafile[-1,1]
t_test_mine <- function(x, y, z){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[y:nrow(datafile),z:length(datafile)], 2,
function(x) as.numeric(x)))
#datagroups <- datafile[1,]
#sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
#datafile_with_samples <- cbind(sample_names, datafile_final)
#datagroups$p_value <- NA
#colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- merge(data.frame(datafile, row.names=NULL), data.frame(p_value, row.names=NULL), by = 0, all = TRUE)[-1]
#datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1] <- ""
write.table(datafile_for_real_final, paste("p_values", x, sep = "_"), col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
t_test_mine("pseudo_genes2_t1.xls", 2, 3)
View(t_test_mine)
datafile_final <- as.data.frame(apply(datafile[y:nrow(datafile),z:length(datafile)], 2,
function(x) as.numeric(x)))
#datagroups <- datafile[1,]
#sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
#datafile_with_samples <- cbind(sample_names, datafile_final)
#datagroups$p_value <- NA
#colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- merge(data.frame(datafile, row.names=NULL), data.frame(p_value, row.names=NULL), by = 0, all = TRUE)[-1]
#datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1] <- ""
t_test_mine("pseudo_genes2_t1.xls", 4, 3)
t_test_mine("pseudo_genes2_t1.xls", 2, 2)
datafile_final <- as.data.frame(apply(datafile[y:nrow(datafile),z:length(datafile)], 2,
function(x) as.numeric(x)))
#datagroups <- datafile[1,]
#sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
#datafile_with_samples <- cbind(sample_names, datafile_final)
#datagroups$p_value <- NA
#colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- merge(data.frame(datafile, row.names=NULL), data.frame(p_value, row.names=NULL), by = 0, all = TRUE)[-1]
#datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1] <- ""
?mege
?merge
datafile_with_samples <- merge(data.frame(sample_names, row.names=NULL), data.frame(datafile_final, row.names=NULL), by = 0, all = TRUE, sort = T)[-1]
View(datafile_with_samples)
datafile_with_samples <- merge(data.frame(sample_names, row.names=NULL), data.frame(datafile_final, row.names=NULL), by = 0, all = TRUE, sort = F)[-1]
View(datafile_with_samples)
t_test_mine <- function(x, y, z){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[y:nrow(datafile),z:length(datafile)], 2,
function(x) as.numeric(x)))
#datagroups <- datafile[1,]
#sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
#datafile_with_samples <- cbind(sample_names, datafile_final)
#datagroups$p_value <- NA
#colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- merge(data.frame(datafile, row.names=NULL), data.frame(p_value, row.names=NULL), by = 0, all = TRUE, sort = F)[-1]
#datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1] <- ""
write.table(datafile_for_real_final, paste("p_values", x, sep = "_"), col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
t_test_mine("pseudo_genes2_t1.xls", 2, 2)
t_test_mine("pseudo_genes2_t1.xls", 2, 3)
t_test_mine("pseudo_genes2_t1.xls", 4, 2)
t_test_mine <- function(x, y, z){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[y:nrow(datafile),z:length(datafile)], 2,
function(x) as.numeric(x)))
#datagroups <- datafile[1,]
#sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
#datafile_with_samples <- cbind(sample_names, datafile_final)
#datagroups$p_value <- NA
#colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- merge(data.frame(datafile, row.names=NULL), data.frame(p_value, row.names=NULL), by = z, all = TRUE, sort = F)[-1]
#datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1] <- ""
write.table(datafile_for_real_final, paste("p_values", x, sep = "_"), col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
t_test_mine("pseudo_genes2_t1.xls", 4, 2)
t_test_mine("pseudo_genes2_t1.xls", 4, 2)
t_test_mine <- function(x, y, z){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[y:nrow(datafile),z:length(datafile)], 2,
function(x) as.numeric(x)))
#datagroups <- datafile[1,]
#sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
#datafile_with_samples <- cbind(sample_names, datafile_final)
#datagroups$p_value <- NA
#colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- merge(data.frame(datafile, row.names=NULL), data.frame(p_value, row.names=NULL), by = 0, all = TRUE, sort = F)[-1]
#datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1] <- ""
write.table(datafile_for_real_final, paste("p_values", x, sep = "_"), col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
t_test_mine("pseudo_genes2_t1.xls", 4, 2)
View(datafile_for_real_final)
datafile_for_real_final <- merge(data.frame(datafile, row.names=NULL), data.frame(p_value, row.names=NULL), by = "" , all = TRUE, sort = F)[-1]
t_test_mine <- function(x, y, z){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[y:nrow(datafile),z:length(datafile)], 2,
function(x) as.numeric(x)))
#datagroups <- datafile[1,]
#sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
#datafile_with_samples <- cbind(sample_names, datafile_final)
#datagroups$p_value <- NA
colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- merge(data.frame(datafile, row.names=NULL), data.frame(p_value, row.names=NULL), by = 0, all = TRUE, sort = F)[-1]
#datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1] <- ""
write.table(datafile_for_real_final, paste("p_values", x, sep = "_"), col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
t_test_mine <- function(x, y, z){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[y:nrow(datafile),z:length(datafile)], 2,
function(x) as.numeric(x)))
#datagroups <- datafile[1,]
#sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
#datafile_with_samples <- cbind(sample_names, datafile_final)
#datagroups$p_value <- NA
colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- merge(data.frame(datafile, row.names=NULL), data.frame(p_value, row.names=NULL), by = "sample_names", all = TRUE, sort = F)[-1]
#datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1] <- ""
write.table(datafile_for_real_final, paste("p_values", x, sep = "_"), col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
t_test_mine("pseudo_genes2_t1.xls", 4, 2)
t_test_mine <- function(x, y, z){
datafile <- read.xlsx(x, sheetIndex = 1)
datafile_final <- as.data.frame(apply(datafile[y:nrow(datafile),z:length(datafile)], 2,
function(x) as.numeric(x)))
#datagroups <- datafile[1,]
#sample_names <- datafile[-1,1]
data_labels <- unique(sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean <- grepl(data_labels[1], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
boolean2 <- grepl(data_labels[2], sapply(datafile[1,2:length(datafile)],
function(x) as.character(x)))
p_value <- apply(datafile_final[1:length(datafile_final)], 1,
function(x) t.test(x[boolean], x[boolean2], var.equal = TRUE)$p.value)
#datafile_with_samples <- cbind(sample_names, datafile_final)
#datagroups$p_value <- NA
#colnames(datagroups)[1] <- "sample_names"
datafile_for_real_final <- merge(data.frame(datafile, row.names=NULL), data.frame(p_value, row.names=NULL), by = 0, all = TRUE, sort = F)[-1]
#datafile_for_real_final <- rbind(datagroups, datafile_for_real_final)
colnames(datafile_for_real_final)[1] <- ""
write.table(datafile_for_real_final, paste("p_values", x, sep = "_"), col.names = TRUE, row.names = FALSE, sep="\t", na = "")
}
View(datafile_for_real_final)
t_test_mine("pseudo_genes2_t1.xls", 4, 2)
x <- 1:2
y <- 1:10
n <- max(length(x), length(y))
length(x) <- n
length(y) <- n
rm(x)
rm(y)
rm(n)
x <- 1:2
y <- 1:10
n <- max(length(x))
n <- max(length(y))
length(x) <- n
length(y) <- n
n <- max(length(p_value), length(datafile))
save(t_test_mine, file = "t_test_fun2.RData")
